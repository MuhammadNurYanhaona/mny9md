Note that the outputs produced by my semantic analyzer for 'bad4.decaf' and 'bad6.decaf'
slightly differs from the sample outputs provided with the pp3.zip. This is because my
semantic analyzer reports errors in-order, as they appear in the code, instead of ordering
the errors based on the scope nesting level. As I initially thought, in-order error
reporting is a requirement and designed my code to behave that way, I am not changing
it at the last moment. Rather, here I discuss how I implemented in-order error reporting
and what changes in the code may cause my code to behave in a way to match the sample
outputs.

I first create symbol tables for the global scope, all classes, functions' parameter lists.
During this initial symbol table construction phase, no scope nesting is been considered.
That is each scoping domain stands in isolation. At this time, the I may detect that there 
are duplicate declarations, but I simply ignore the duplicates and report nothing.

Once I have the symbol tables for the scopes then I start the symantic analysis using a 
polymorphic checkSemantics(Scope *currentScope) method. This is an in-order traversal of the
syntax tree. As I enter a scope, suppose a function, I extend the current scope by attaching 
the already created function scope at the end. Then I do all the semantic validation at 
that level. This process ensures that all symbols visible to the function are available as
I entered its scope. At the same time, it ensures that the errors are printed in order. 

To change this code to produce the output of the sample files, I have to merge the symbol
table construction phase with the semantic validation phase. Simply, I have to validate the
global scope first, then I have to enter each class/method one-by-one as it appears in the
code. If there is a class that extends/implements another class/interface that is further
down in the decaf file then I have to jump to that class/interface, validate it first and then
come back. A flag is needed with each symbol to ensure that it is not validated multiple
times.   

    
